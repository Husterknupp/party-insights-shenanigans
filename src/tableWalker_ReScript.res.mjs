// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Exn from "rescript/lib/es6/Exn.js";
import * as Cheerio from "cheerio";
import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import * as Belt_Option from "rescript/lib/es6/Belt_Option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Error from "@rescript/core/src/Core__Error.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Core__Nullable from "@rescript/core/src/Core__Nullable.res.mjs";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";

let applyElementToCheerioUnsafe = (function(element, selectorFunction) {
        return selectorFunction(element)
      });

function load(html, maybeOptions, isDocument) {
  let loadedCheerio = Cheerio.load(html, maybeOptions, isDocument);
  return (unsafeFromJsLand, basicAcceptedElems) => {
    if (unsafeFromJsLand !== undefined) {
      return applyElementToCheerioUnsafe(Primitive_option.valFromOption(unsafeFromJsLand), loadedCheerio);
    } else {
      return applyElementToCheerioUnsafe(basicAcceptedElems._0, loadedCheerio);
    }
  };
}

function cheerioToElementArray(queriedCheerio) {
  return queriedCheerio.toArray();
}

function getParent(element) {
  return element.parent;
}

function getParentExn(element) {
  return Belt_Option.getExn(element.parent);
}

function getChildren(element) {
  return element.children;
}

function getType(element) {
  return element.type;
}

function getData(element) {
  if (element.type !== "text" || element.type !== "comment" || element.type !== "directive") {
    Exn.raiseError("Trying to get 'data' from non-text element");
  }
  return element.data;
}

function getName(element) {
  return element.name;
}

function getColspan(element) {
  let match = element.type;
  if (match !== "style" && match !== "tag" && match !== "script") {
    return Exn.raiseError("Trying to get 'colspan' from non-element node");
  }
  let colspan = Core__Nullable.getExn(element.attribs).colspan;
  if (colspan == null) {
    return "1";
  } else {
    return colspan;
  }
}

function getColspanInt(element) {
  let parsed = Core__Int.fromString(getColspan(element), undefined);
  if (parsed !== undefined) {
    return parsed;
  } else {
    return 1;
  }
}

function getText(element, loadedCheerio) {
  return loadedCheerio(undefined, {
    TAG: "CheerioElement",
    _0: element
  }).text();
}

let CheerioFacade = {
  applyElementToCheerioUnsafe: applyElementToCheerioUnsafe,
  load: load,
  cheerioToElementArray: cheerioToElementArray,
  getParent: getParent,
  getParentExn: getParentExn,
  getChildren: getChildren,
  getType: getType,
  getData: getData,
  getName: getName,
  getColspan: getColspan,
  getColspanInt: getColspanInt,
  getText: getText
};

function _initializeCheerio(html) {
  if (html.indexOf("<html>") !== -1) {
    return load(html, null, true);
  } else {
    return load(html, null, false);
  }
}

function _sanityCheckHeaders(cheerioWithHeaders) {
  let headerElements = cheerioWithHeaders.toArray();
  let element = Core__Option.getExn(headerElements[0], undefined);
  let parent = Belt_Option.getExn(element.parent);
  let maybeInvalidHeader = headerElements.find(header => Belt_Option.getExn(header.parent) !== parent);
  if (maybeInvalidHeader === undefined) {
    return;
  }
  let invalidHeader = Primitive_option.valFromOption(maybeInvalidHeader);
  let thText = invalidHeader.children.map(getData).toString();
  let expected = parent.name;
  let actual = Core__Option.getExn(invalidHeader.parent, undefined).name;
  Core__Error.panic("Multiple headline rows--that's bad. <th>" + thText + "</th>. Expected parent element " + expected + ", but was " + actual);
}

function parseIntOr(maybeString, fallback) {
  let n = Core__Int.fromString(maybeString, undefined);
  if (n !== undefined) {
    return n;
  } else {
    return fallback;
  }
}

function removeInnerWhiteSpace(text) {
  return text.replace(/\s+/g, " ").trim();
}

function _getHeaderCells(loadedCheerio) {
  let ths = loadedCheerio(undefined, {
    TAG: "String",
    _0: "th"
  });
  _sanityCheckHeaders(ths);
  let thElements = ths.toArray();
  let columnCount = Core__Array.reduce(thElements.map(getColspanInt), 0, (prev, curr) => prev + curr | 0);
  console.log("Found " + thElements.length.toString() + " table headers (spanning " + columnCount.toString() + " columns).");
  return Core__Array.reduceWithIndex(thElements, [], (headers, header, headerIdx) => {
    let maybePreviousCol = Core__Option.map(headers[headerIdx - 1 | 0], h => h.colEnd);
    let colStart = maybePreviousCol !== undefined ? maybePreviousCol + 1 | 0 : 0;
    let colEnd = (colStart + getColspanInt(header) | 0) - 1 | 0;
    let linesOfText = [removeInnerWhiteSpace(getText(header, loadedCheerio))];
    return headers.concat([{
        colStart: colStart,
        colEnd: colEnd,
        linesOfText: linesOfText
      }]);
  });
}

export {
  CheerioFacade,
  _initializeCheerio,
  _sanityCheckHeaders,
  parseIntOr,
  removeInnerWhiteSpace,
  _getHeaderCells,
}
/* cheerio Not a pure module */
