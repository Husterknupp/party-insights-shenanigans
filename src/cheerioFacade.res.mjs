// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cheerio from "cheerio";
import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import * as Core__Error from "@rescript/core/src/Core__Error.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Core__Nullable from "@rescript/core/src/Core__Nullable.res.mjs";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";

function load(html, maybeOptions, isDocument) {
  let loadedCheerio = Cheerio.load(html, maybeOptions, isDocument);
  let applyElementToCheerioUnsafe = (function(element, selectorFunction) {
        return selectorFunction(element)
      });
  return (unsafeFromJsLand, basicAcceptedElems) => {
    if (unsafeFromJsLand !== undefined) {
      return applyElementToCheerioUnsafe(Primitive_option.valFromOption(unsafeFromJsLand), loadedCheerio);
    } else {
      return applyElementToCheerioUnsafe(basicAcceptedElems._0, loadedCheerio);
    }
  };
}

function cheerioToElementArray(queriedCheerio) {
  return queriedCheerio.toArray();
}

function getParent(element) {
  return element.parent;
}

function getParentExn(element) {
  return Core__Option.getExn(element.parent, undefined);
}

function getChildren(element) {
  return element.children;
}

function getType(element) {
  return element.type;
}

function getData(element) {
  if (element.type !== "text" && element.type !== "comment" && element.type !== "directive") {
    Core__Error.panic("Trying to get 'data' from non-text element");
  }
  return element.data;
}

function getName(element) {
  return element.name;
}

function getColspan(element) {
  let match = element.type;
  if (match !== "style" && match !== "tag" && match !== "script") {
    return Core__Error.panic("Trying to get 'colspan' from non-element node");
  }
  let colspan = Core__Nullable.getExn(element.attribs).colspan;
  if (colspan == null) {
    return "1";
  } else {
    return colspan;
  }
}

function getColspanInt(element) {
  let parsed = Core__Int.fromString(getColspan(element), undefined);
  if (parsed !== undefined) {
    return parsed;
  } else {
    return 1;
  }
}

function getRowspan(element) {
  let match = element.type;
  if (match !== "style" && match !== "tag" && match !== "script") {
    return Core__Error.panic("Trying to get 'rowspan' from non-element node");
  }
  let rowspan = Core__Nullable.getExn(element.attribs).rowspan;
  if (rowspan == null) {
    return "1";
  } else {
    return rowspan;
  }
}

function getRowspanInt(element) {
  let parsed = Core__Int.fromString(getRowspan(element), undefined);
  if (parsed !== undefined) {
    return parsed;
  } else {
    return 1;
  }
}

function getText(element, loadedCheerio) {
  return loadedCheerio(undefined, {
    TAG: "AnyNode",
    _0: element
  }).text();
}

function getLengthString(queriedCheerio) {
  return queriedCheerio.length.toString();
}

function each(queriedCheerio, callback) {
  queriedCheerio.each(callback);
}

function find(queriedCheerio, queryString) {
  return queriedCheerio.find(queryString);
}

function remove(queriedCheerio) {
  return queriedCheerio.remove();
}

function contents(queriedCheerio) {
  return queriedCheerio.contents();
}

function getLast(queriedCheerio) {
  return queriedCheerio.last();
}

function getSrc(element) {
  return Primitive_option.fromNullable(element.attr("src"));
}

export {
  load,
  cheerioToElementArray,
  getParent,
  getParentExn,
  getChildren,
  getType,
  getData,
  getName,
  getColspan,
  getColspanInt,
  getRowspan,
  getRowspanInt,
  getText,
  getLengthString,
  each,
  find,
  remove,
  contents,
  getLast,
  getSrc,
}
/* cheerio Not a pure module */
