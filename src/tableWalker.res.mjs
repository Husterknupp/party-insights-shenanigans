// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Error from "@rescript/core/src/Core__Error.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as CheerioFacade from "./cheerioFacade.res.mjs";

function loadCheerio(html) {
  if (html.indexOf("<html>") !== -1) {
    return CheerioFacade.load(html, null, true);
  } else {
    return CheerioFacade.load(html, null, false);
  }
}

function _sanityCheckHeaders(cheerioWithHeaders) {
  var headerElements = CheerioFacade.cheerioToElementArray(cheerioWithHeaders);
  var firstHeader = Core__Option.getExn(headerElements[0], undefined);
  if (CheerioFacade.getName(firstHeader) !== "th") {
    console.log(firstHeader);
    Core__Error.panic("Queried cheerio was expected to contain any headers. But it doesn't");
  }
  var parent = CheerioFacade.getParentExn(firstHeader);
  var maybeInvalidHeader = headerElements.find(function (header) {
        return CheerioFacade.getParentExn(header) !== parent;
      });
  if (maybeInvalidHeader === undefined) {
    return ;
  }
  var invalidHeader = Caml_option.valFromOption(maybeInvalidHeader);
  var thText = CheerioFacade.getChildren(invalidHeader).map(CheerioFacade.getData).toString();
  var expected = CheerioFacade.getName(parent);
  var actual = CheerioFacade.getName(Core__Option.getExn(CheerioFacade.getParent(invalidHeader), undefined));
  Core__Error.panic("Multiple headline rows--that's bad. <th>" + thText + "</th>. Expected parent element " + expected + ", but was " + actual);
}

function _removeInnerWhiteSpace(text) {
  return text.replace(/\s+/g, " ").trim();
}

function _getHeaderCells(loadedCheerio) {
  var ths = loadedCheerio(undefined, {
        TAG: "StringSelector",
        _0: "th"
      });
  _sanityCheckHeaders(ths);
  var thElements = CheerioFacade.cheerioToElementArray(ths);
  var columnCount = Core__Array.reduce(thElements.map(function (th) {
            return CheerioFacade.getColspanInt(th);
          }), 0, (function (prev, curr) {
          return prev + curr | 0;
        }));
  console.log("Found " + thElements.length.toString() + " table headers (spanning " + columnCount.toString() + " columns).");
  return Core__Array.reduceWithIndex(thElements, [], (function (headers, header, headerIdx) {
                var maybePreviousCol = Core__Option.map(headers[headerIdx - 1 | 0], (function (h) {
                        return h.colEnd;
                      }));
                var colStart = maybePreviousCol !== undefined ? maybePreviousCol + 1 | 0 : 0;
                var colEnd = (colStart + CheerioFacade.getColspanInt(header) | 0) - 1 | 0;
                var linesOfText = [_removeInnerWhiteSpace(CheerioFacade.getText(header, loadedCheerio))];
                return headers.concat([{
                              colStart: colStart,
                              colEnd: colEnd,
                              linesOfText: linesOfText
                            }]);
              }));
}

function _getStartIndexForCell(allCells, initialColumnIdx, rowIndex) {
  var _columnIdx = initialColumnIdx;
  while(true) {
    var columnIdx = _columnIdx;
    var maybeShiftCellRight = allCells.find((function(columnIdx){
        return function (cell) {
          if (cell.colStart <= columnIdx && columnIdx <= cell.colEnd) {
            return cell.rowEnd >= rowIndex;
          } else {
            return false;
          }
        }
        }(columnIdx)));
    if (maybeShiftCellRight === undefined) {
      return columnIdx;
    }
    console.log("Row no. " + rowIndex.toString() + ": At column " + columnIdx.toString() + " I found a cell of an earlier row... one to the right");
    _columnIdx = maybeShiftCellRight.colEnd + 1 | 0;
    continue ;
  };
}

function _getDataCells(cheerio) {
  var rows = cheerio(undefined, {
        TAG: "StringSelector",
        _0: "tr:has(td)"
      });
  console.log("Found " + CheerioFacade.getLengthString(rows) + " rows (not including rowspans).");
  var allCells = [];
  CheerioFacade.each(rows, (function (rowIndex, row) {
          var dataCells = CheerioFacade.find(cheerio(undefined, {
                    TAG: "AnyNode",
                    _0: row
                  }), "td");
          var columnIdx = {
            contents: 0
          };
          CheerioFacade.each(dataCells, (function (param, cell) {
                  var colStart = _getStartIndexForCell(allCells, columnIdx.contents, rowIndex);
                  var colEnd = (colStart + CheerioFacade.getColspanInt(cell) | 0) - 1 | 0;
                  var rowEnd = (rowIndex + CheerioFacade.getRowspanInt(cell) | 0) - 1 | 0;
                  allCells.push({
                        colStart: colStart,
                        colEnd: colEnd,
                        rowStart: rowIndex,
                        rowEnd: rowEnd,
                        _cheerioEl: Caml_option.some(cell)
                      });
                  columnIdx.contents = colEnd + 1 | 0;
                }));
        }));
  return allCells;
}

function _concatenate(a, b) {
  var isPunctuation = function (c) {
    if (c === "." || c === "," || c === "?" || c === "!" || c === ":") {
      return true;
    } else {
      return c === ";";
    }
  };
  var firstChar = b.charAt(0);
  if (firstChar === "") {
    return a;
  } else if (isPunctuation(firstChar)) {
    return a + b;
  } else {
    return a + " " + b;
  }
}

function removeInvisibleSourceLineBreaks(cheerio, node) {
  var lines = [];
  var nodes = CheerioFacade.cheerioToElementArray(CheerioFacade.contents(cheerio(undefined, {
                TAG: "AnyNode",
                _0: node
              })));
  var currentInlineText = {
    contents: ""
  };
  var flushInlineText = function () {
    if (currentInlineText.contents !== "") {
      lines.push(_removeInnerWhiteSpace(currentInlineText.contents));
      currentInlineText.contents = "";
      return ;
    }
    
  };
  nodes.forEach(function (node) {
        var text = CheerioFacade.getText(node, cheerio).trim();
        var nodeName = CheerioFacade.getName(node);
        if (nodeName === "p" || nodeName === "br") {
          flushInlineText();
          if (nodeName === "p" && text !== "") {
            lines.push(_removeInnerWhiteSpace(text));
            return ;
          } else {
            return ;
          }
        } else if (text !== "") {
          currentInlineText.contents = _concatenate(currentInlineText.contents, text);
          return ;
        } else {
          return ;
        }
      });
  flushInlineText();
  return lines;
}

function _extractTextFromCell(cheerio, cell) {
  CheerioFacade.remove(CheerioFacade.find(cheerio(undefined, {
                TAG: "AnyNode",
                _0: Core__Option.getExn(cell._cheerioEl, undefined)
              }), "small"));
  CheerioFacade.remove(CheerioFacade.find(cheerio(undefined, {
                TAG: "AnyNode",
                _0: Core__Option.getExn(cell._cheerioEl, undefined)
              }), "sup"));
  return removeInvisibleSourceLineBreaks(cheerio, Core__Option.getExn(cell._cheerioEl, undefined));
}

function _extractAndResizeImageUrl(cheerio, cell) {
  var imageElement = CheerioFacade.getLast(CheerioFacade.find(cheerio(undefined, {
                TAG: "AnyNode",
                _0: Core__Option.getExn(cell._cheerioEl, undefined)
              }), "img"));
  return Core__Option.map(CheerioFacade.getSrc(imageElement), (function (src) {
                var parts = src.split("/");
                var filtered = parts.filter(function (param, index) {
                      return index !== (parts.length - 1 | 0);
                    });
                var lastPart = Core__Option.getExn(filtered[filtered.length - 1 | 0], undefined);
                var newLastPart = "400px-" + lastPart.replace(/\.tif$/, ".png");
                filtered.push(newLastPart);
                return "https:" + filtered.join("/");
              }));
}

function _findHeaderTextForCell(headerCells, cell, content) {
  var header = headerCells.find(function (header) {
        if (header.colStart <= cell.colStart) {
          return cell.colStart <= header.colEnd;
        } else {
          return false;
        }
      });
  if (header !== undefined) {
    return Core__Option.getExn(header.linesOfText[0], undefined);
  } else {
    return Core__Error.panic("Could not find matching header. Cell's content is \"" + content.join("") + "\". Cell is located at col " + cell.colStart.toString() + " (colEnd: " + cell.colEnd.toString() + "), row " + cell.rowStart.toString() + " (rowEnd: " + cell.rowEnd.toString() + ")");
  }
}

function _cellHasContent(cell) {
  if (cell.linesOfText.length !== 0) {
    return true;
  } else {
    return Core__Option.isSome(cell.imageUrl);
  }
}

function tableWalker(html) {
  var cheerio = loadCheerio(html);
  var headerCells = _getHeaderCells(cheerio);
  var dataCells = _getDataCells(cheerio);
  return dataCells.map(function (cell) {
                var linesOfText = _extractTextFromCell(cheerio, cell);
                var imageUrl = _extractAndResizeImageUrl(cheerio, cell);
                var header = _findHeaderTextForCell(headerCells, cell, linesOfText);
                return {
                        colStart: cell.colStart,
                        colEnd: cell.colEnd,
                        rowStart: cell.rowStart,
                        rowEnd: cell.rowEnd,
                        imageUrl: imageUrl,
                        header: header,
                        linesOfText: linesOfText
                      };
              }).filter(_cellHasContent);
}

export {
  loadCheerio ,
  _sanityCheckHeaders ,
  _removeInnerWhiteSpace ,
  _getHeaderCells ,
  _getStartIndexForCell ,
  _getDataCells ,
  _concatenate ,
  removeInvisibleSourceLineBreaks ,
  _extractTextFromCell ,
  _extractAndResizeImageUrl ,
  _findHeaderTextForCell ,
  _cellHasContent ,
  tableWalker ,
}
/* CheerioFacade Not a pure module */
